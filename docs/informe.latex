\documentclass[titlepage,a4paper]{article}

\usepackage{a4wide}
\usepackage[colorlinks=true,linkcolor=black,urlcolor=blue,bookmarksopen=true]{hyperref}
\usepackage{bookmark}
\usepackage{fancyhdr}
\usepackage[spanish]{babel}
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{graphicx}
\usepackage{float}
\usepackage{minted}

\pagestyle{fancy} % Encabezado y pie de página
\fancyhf{}
\fancyhead[L]{TP1 - Miroslav Sapunar}
\fancyhead[R]{Algoritmos y Programación III - FIUBA}
\renewcommand{\headrulewidth}{0.4pt}
\fancyfoot[C]{\thepage}
\renewcommand{\footrulewidth}{0.4pt}

\begin{document}
\begin{titlepage} % Carátula
	\hfill\includegraphics[width=6cm]{logofiuba.jpg}
    \centering
    \vfill
    \Huge \textbf{Trabajo Práctico 1 — Smalltalk}
    \vskip2cm
    \Large [7507/9502] Algoritmos y Programación III\\
    Curso 2 \\ % Curso 1 para el de la tarde y 2 para el de la noche
    Primer cuatrimestre de 2020 
    \vfill
    \begin{tabular}{ | l | l | } % Datos del alumno
      \hline
      Alumno: & SAPUNAR, Miroslav \\ \hline
      Número de padrón: & 95060 \\ \hline
      Email: & psapunar@fi.uba.ar \\ \hline
  	\end{tabular}
    \vfill
    \vfill
\end{titlepage}

\tableofcontents % Índice general
\newpage

\section{Introducción}\label{sec:intro}
El presente informe reúne la documentación de la solución del primer trabajo práctico de la materia Algoritmos y Programación III que consiste en desarrollar un aplicación para un sistema de calculo de presupuestos para tareas de pintado en Pharo, utilizando los conceptos del paradigma de la orientación a objetos vistos hasta ahora en el curso.

\section{Supuestos}\label{sec:supuestos}
% Deberá contener explicaciones de cada uno de los supuestos que el alumno haya tenido que adoptar a partir de situaciones que no estén contempladas en la especificación.

Se tuvieron en cuenta las siguientes suposiciones a la hora de desarrollar la aplicación, que deben ser respetadas para su correcto funcionamiento:
\begin{description}
\item[1.] El programa sólo interactúa con el usuario mediante la clase AlgoFix y su correspondiente interfaz.
\item[2.] El programa no registra pintores con nombres nulos o vacíos ni con una tarifa menor o igual a 0.
\item[3.] El programa no registra pintores cuya herramienta de trabajo no sea un pincel o un rodillo.
\item[4.] El programa no registra pinturas con nombres nulos o vacíos ni con un precio menor o igual a 0.
\item[5.] El programa no registra pinturas que indiquen que necesitan capas de pintura necesarias según herramienta menores o iguales a 0.
\item[6.] El programa sólo acepta como herramientas validas el pincel o el rodillo. Las características de las mismas fueron inicializadas en base a los requisitos de las pruebas entregadas por la cátedra, a saber: pincel, 4 litros por m2, 2 horas por m2 - rodillo, 5 litros por m2, 1 hora por m2. 
\item[7.] El programa necesita al menos un pintor y una pintura registradas para elaborar un presupuesto y que los m2 proyectados para el mismo sean mayores a 0.
\item[8.] El programa considera como parámetro de comparación entre los presupuestos el costo total del mismo, entendiéndose como la suma del costo de mano de obra más el costo de materiales.
\item[9.] Si dos o mas presupuestos compartieran el menor costo total. El programa devuelve el del pintor correspondiente al primero de ellos siguiendo el orden de registro de pintores.
\item[10.] El programa trabaja con una sola pintura a la vez en la elaboración del presupuesto más barato para la misma. Siendo necesario pedir el presupuesto más barato para cada pintura con la que se trabaje.

\end{description}

\section{Modelo de dominio}\label{sec:modelo}
% Explicación concisa del diseño general del trabajo.

AlgoFix es la clase principal entre todas las clases, organiza el flujo de información del programa y presenta una interfaz publica con la que un usuario exterior puede interactuar. Su función en el programa es almacenar a los Pintores registrados y delegar las responsabilidades a las demás clases cuando se le da una orden.
\newpage

\section{Diagramas de clase}\label{sec:diagramasdeclase}
% Uno o varios diagramas de clases mostrando las relaciones estáticas entre las clases.  Puede agregarse todo el texto necesario para aclarar y explicar su diseño. Recuerden que la idea de todo el documento es que quede documentado y entendible cómo está implementada la solución.

El ente exterior no está representado en el diagrama, éste solo puede interactuar con la clase maestra AlgoFix y esta es la única que puede organizar las interacciones entre las clases Pintor, Pintura y Presupuesto. La clase herramienta es una abstracción del modelo para simplificar el diagrama. Los objetos comprendidos como herramientas interactúan únicamente con las clases Pintor y Pintura.


Todo el funcionamiento del programa comienza en AlgoFix, esta guarda como atributo una OrderCollection de Pintores, que se van registrando con el metodo registarPintor... Además existe una relación de dependencia con las clases Pintura y Presupuesto al instanciar objetos de dicha clase según se le indique con los métodos crearPintura... y presupuestoMasBarato..

Pintor guarda como atributo la clase de la herramienta con la cual fue creado por AlgoFix. En vez de guardar una instancia de la herramienta para cada Pintor, se decidió que el atributo hiciera referencia a la clase de la herramienta a utilizar, esta clase puede ser Pincel o Rodillo, en adelante nos referiremos a las mismas como Herramienta a menos que sea especificado lo contrario. Herramienta le sirve para el calculo de su propio costo de mano de obra, y junto a Pintura, para el calculo de los materiales que utiliza cuando le sea consultado para generar su presupuesto.

Pintura no guarda instancias de otras clases pero es dependencia para las clases AlgoFix, Herramienta y Pintor

Herramienta es la clase que permite a Pintor calcular su propio Presupuesto. El primer diagrama de clases expone las relaciones de herencia entre Herramienta, Pincel y Rodillo.
Tanto para Pincel como Rodillo, todas sus variables y métodos son de clase. Implementan de manera única los métodos: 'ajustarManoObraCon', 'ajustarMaterialCon' y 'preparar'. Este ultimo inicializa las variables que cada clase guarda, si bien tienen los mismo identificadores, no son compartidas entre las clases. Los demás métodos 'ajustarDescuento' y 'ajustarManoObraCon:yCon:'son idénticos y están implementados en la clase madre Herramienta.

\begin{figure}[H]
\centering
\includegraphics[width=1.0\textwidth]{diagrama_clase02.png}
\caption{\label{fig:class01}Relación de herencia entra las clases Herramienta, Pincel y Rodillo}
\end{figure}

Cada presupuesto es instanciado por cada Pintor cuando a este se le pide su presupuesto, guardando responsable del mismo, su costo de mano de obra y su costo material. Para evitar que fuera una clase anímica, se le asigno la responsabilidad de poder determinar el presupuesto menor entre dos de los mismos, implementando su propia versión del método 'min:', esto le permite a una orderCollection de Presupuestos obtener el primer mínimo entre todos los presentes.

\newpage

\begin{figure}[H]
\centering
\includegraphics[width=1.0\textwidth]{diagrama_clase01.png}
\caption{\label{fig:class02}Diagrama de clases general. Se simplifico la herencia entre Herramienta, Pincel y Rodillo a un abstracción}
\end{figure}

\newpage

\section{Detalles de implementación}\label{sec:implementacion}
% Explicaciones sobre la implementación interna de algunas clases que consideren que puedan llegar a resultar interesantes.

\subsection{Calculo descuento, Herramienta}
Checkea que los m2 a pintar sean superiores a los m2 mínimos, para devolver el factor de descuento que se aplicara al costo de mano de obra. Si no se cumple devuelve 1.

\begin{minted}[breaklines]{smalltalk}

ajustarDescuento: metrosParaPintar
    (metrosParaPintar > metrosMinimosDescuento) ifTrue:[
	^ (100 - porcentajeDescuento) / 100.
    ].
    ^ 1.
\end{minted}


\subsection{Ajuste materiales, Pincel/Rodillo}
Devuelve el factor correspondiente al costo de materiales determinado por la herramienta y la pintura utilizada
\begin{minted}[breaklines]{smalltalk}
ajustarMaterialCon: unaPintura
	self preparar.
	^ litrosPorMetroCuadrado * (unaPintura factorPincel)
	
ajustarMaterialCon: unaPintura
	self preparar.
	^ litrosPorMetroCuadrado * (unaPintura factorRodillo)
\end{minted}

\subsection{Menor entre dos Presupuestos, Presupuesto}
implementación de min: de la clase Presupuesto para la determinación del mínimo entre dos presupuestos

\begin{minted}[breaklines]{smalltalk}

min: otroPresupuesto
    (otroPresupuesto valor < self valor) ifTrue:[
	^ otroPresupuesto
    ].
    ^ self
\end{minted}

\subsection{Encontrar el Presupuesto más barato, AlgoFix}
Crea un orderCollection de presupuestos a partir de un orderCollection de pintores, una pintura y la cantidad de metros a pintar para luego devolver el menor de ellos.

\begin{minted}[breaklines]{smalltalk}

presupuestoMasBaratoParaPintarMetrosCuadrados: metrosParaPintar conPintura: pintura

    | presupuestos |
	
    self checkearParametrosRecibidosConMetros: metrosParaPintar yConPintura: pintura.
	
    presupuestos := pintores collect:[ :pintor |
	
	pintor presupuestoParaMetrosCuadrados: metrosParaPintar yPintura: pintura
	
    ].
    ^ (presupuestos min)
\end{minted}

\section{Excepciones}\label{sec:excepciones}
% Explicación de cada una de las excepciones creadas y con qué fin fueron creadas.

\begin{description}
\item[NombreInvalidoError] Se dispara cuando el objeto recibido como nombre no es String.
\item[NombreVacioError] Se dispara cuando el objeto recibido como nombre esta vacio.
\item[PrecioHoraPintorNoValidoError] Se dispara cuando tarifa recibida para el pintor es <= 0.
\item[PrecioLitroPinturaNoValidoError] Se dispara cuando el precio por litro recibido para la pintura es <= 0.
\item[ManosPincelNoValidaError] Se dispara cuando las manos de pincel recibidas para la pintura es son <= 0.
\item[ManosRodilloNoValidaError] Se dispara cuando las manos de rodillo recibidas son <= 0.
\item[PintorInvalidoError] Se dispara cuando el nombre del pintor recibido para el presupuesto no es String
\item[CostoManoDeObraNoValidoError] Se dispara cuando el costo de mano de obra para el presupuesto es <= 0.
\item[CostoMaterialesNoValidaError] Se dispara cuando el costo de mano de obra para el presupuesto es <= 0.
\item[PinturaNulaError] Se dispara cuando la pintura recibida para el presupuesto es nil.
\item[NohayPintoresRegistrados] Se dispara cuando el presupuesto recibe una collecion de pintores vacía.
\item[MetrosCuadradosParaPintarInvalidos] Se dispara cuando el presupuesto recibe
metros cuadrados <= 0
\end{description}
\newpage

\section{Diagramas de secuencia}\label{sec:diagramasdesecuencia}
% Mostrar las secuencias interesantes que hayan implementado. Pueden agregar texto para explicar si algo no queda claro.

Los siguientes diagramas de secuencias muestran la totalidad de las clases(AlgoFix, Pintor, Pintura, Herramienta, Pincel, Rodillo, Presupuesto) usadas para la implementación de la solución de AlgoFix.
\begin{figure}[H]
\centering
\includegraphics[width=1.0\textwidth]{diagrama_secuencia01.png}
\caption{\label{fig:seq01}Diagrama de Secuencia superficial.}
\end{figure}

La figura anterior muestra de forma superficial el funcionamiento general del programa, sin detallar la obtención del presupuesto final.

Cualquier usuario que interactúa con la Clase AlgoFix debe crear una instancia de la misma, mediante el método 'new', solo después de este paso, podrá registrar los pintores que así desee mediante el mensaje 'registarPintorDe*Herramienta*' donde *Herramienta* puede ser Pincel o Rodillo. 

Cada vez que se registra un pintor AlgoFix envía el mensaje 'crearConNombre...' a la clase Pintor para instanciar un pintor. Esta instancia guarda como atributos, el nombre, la tarifa y la clase -no una instancia- de la Herramienta que AlgoFix le asigno.
Todas las instancias de Pintor creadas son guardadas en un OrderCollection identificado por el atributo pintores de AlgoFix.

La clase pintor tiene la responsabilidad de calcular su costo de mano de obra y su costo de materiales para cada instancia de Pintor, utilizando la clase Herramienta asignada, los metros a pintar y una instancia de Pintura.

La clase Herramienta es la madre de las clases Pincel y Rodillo y define el comportamiento compartido de las ultimas dos. Son clases que no requieren instancias para funcionar y que aprovechan el polimorfirmo para recibir las responsabilidades delegadas por la clase Pintor.  

Para crear una pintura se utiliza el método 'crearPintura...' de AlgoFix, el cual a su vez envía el método 'crearCon...' a la clase Pintura. 

La instancia creada no sera guardada como atributo de AlgoFix. El scope que crea a AlgoFix debe tener variables apropiadas para recibir las instancias creadas de esta clase.

Solo una vez que hayan sido registrados el/los pintores y creada la pintura se podrá solicitar a AlgoFix el presupuesto más barato. Para ello se enviara el mensaje 'presupuestoMasBaratoParaPintarMetrosCuadrados:conPintura:' con los metros a pintar y la pintura a utilizar. AlgoFix responderá a este método con el menor presupuesto entre todos los posibles presupuestos para el trabajo.


El metodo 'presupuestoMasBarato...', delega la tarea de buscar el presupuesto más barato en las clases Pintor y Presupuesto. La secuencia se detalla en el siguiente diagrama.

\begin{figure}[H]
\centering
\includegraphics[width=\textwidth]{diagrama_secuencia02.png}
\caption{\label{fig:seq02}Diagrama secuencia detalle obtención Presupuesto mas barato.}
\end{figure}

Mediante un collect: con todos los pintores registrados, se le pide a cada uno la creación de un presupuesto propio para los metros a pintar y pintura indicados.

Para ello, se calcula el costo de mano de obra y el costo de materiales, mediante delegaciones a Herramienta y a la instancia de Pintura recibida. 

Ya con toda esta información pintor delega el checkeo de los valores  y la creación de la instancia a la clase Presupuesto. Esta devolverá una instancia valida que sera agregada a una OrderCollection temporal -creada por el collect antes mencionado- con los presupuestos de los demás pintores.

Finalizado el loop, el método devuelve como respuesta el resultado de mandarle el mensaje 'min' a la orderCollection de presupuestos, delegando en esta la búsqueda del presupuesto menor.

Lo anterior es posible ya que Presupuesto tiene una implementación particular del método 'min:', con el es capaz de determinar cual es el menor entre instancias de si misma y devuelve la primera ocurrencia en caso de múltiples presupuestos con igual valor mínimo.

Lo anterior permite recibir como respuesta del metodo 'presupuestoMasBarato...' una única instancia de Presupuesto de valor mínimo, que cumple el fin del programa.
\end{document}
