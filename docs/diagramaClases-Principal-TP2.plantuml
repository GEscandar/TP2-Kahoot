@startuml DiagramaUML-Clases-TP2
hide circle
skinparam classAttributeIconSize 0

abstract Question{
    - id : long
    + options : List<GameOption>
    # correctOptions : List<GameOption>
    + calculatePoints(List<GameOptions>, ScoreAugmenter) : Score
    + calculatePoints(GameOptions, ScoreAugmenter) : Score
    # {abstract}calculatePoints(List<GameOptions>) : int
}

class GameOption{
    - id : long
	  - text : String
    + equals(Object obj) : Boolean
}

class OptionGroup{
    - options : List<GameOption>
    + addOptions(GameOption ... option)
    + equals(Object obj) : boolean
}

class MatchResult{
    + MatchResult(Player, Score)
    - player : Player
	  - selectedAugmenter : ScoreAugmenter
	  + matchScore : Score
    + sumMatchScoreToPlayer()
    + applyScoreAugmenter(List<MatchResult> resultList) 
}

class Score{
    + value : int
    + augmenter
    + sum(Score score)
    + biggerThan(Score score) : boolean
    + equals(Object obj) : Boolean
}

class Game{	
    - players : List<Player>
	  - question : List<Question>
    - matchResults : List<MatchResult>
    - playersIterator : Iterator<Player>
    - questionIterator : Iterator<Question>
	  + currentPlayer : Player
    + currentQuestion : Question
    + isOver : boolean
    + start()
    + newRound()
    + getTurnCount() : int
    + isAugmenterAvailable(ScoreAugmenter) : boolean
    + nextTurn(List<GameOption>, ScoreAugmenter)
    + getWinner()
}

class ScoreCalculator{
    + {static} calculateRoundEndResults(List<MatchResult> matchResults)
	  - {static} calculateAugmenters(List<MatchResult> matchResults)
    - {static} sumMatchScore(List<MatchResult> matchResults)
}

class Player{
    - name : String
	  - score : Score
    - augmenters : List<ScoreAugmenter>
	  - loadAugmenters()
    + sumScore(Score matchScore)
    + hasAugmenter(AugmenterType augmenterType) : boolean
}

abstract ScoreAugmenter{
    + {abstract}applyScoreAugmenter(Score score, Score opponentScore)
    + {abstract}getUsesPerPlayer() : int 
    + {abstract}isForPenalty() : boolean
    + equals(Object obj) : boolean
}


Game  o--left"1..*"  Question
Game o--"1..*"  Player
Game o--right"1..*"  MatchResult
Game --up> ScoreCalculator

MatchResult *--up"1..1" ScoreAugmenter
MatchResult *--"1..1" Player
MatchResult *--down"1..1" Score 

ScoreCalculator --> MatchResult

Player --up> Question

Player "1..1"*--right Score

Question "1..*"*--up GameOption
OptionGroup --down|> GameOption

@enduml