@startuml DiagramaUML-Clases-TP2
hide circle
skinparam classAttributeIconSize 0

abstract Question{
    + id : long
    + options : List<GameOption>
    # correctOptions : List<GameOption>
    - {abstract}calculatePoints(List<GameOptions>) : int
}

class GameOption{
    + id : long
	+ text : String
    + equals(Object obj) : Boolean
}

class OptionGroup{
    + options : List<GameOption>
}

class Score{
    - value : int
	- questionScore : int
	- augmenter : ScoreAugmenter
    + update(Score oponentScore)
    + setQuestionScore()
    + setAugmenter()
    + equals(Object obj) : Boolean
}

class Game{
    + players : List<Player>
	  + question : List<Question>
	  + currentPlayer : Player
    + currentQuestion : Question
    + start()
    + nextTurn(selectedOptions, selectedAugmenter)
    + getWinner()
}

class ScoreCalculator{
  + {static} calculateRoundEndResults(matchResults :List<MatchResult>)
	- {static} calculateAugmenters(matchResults :List<MatchResult>)
  - {static} sumMatchScore(matchResults :List<MatchResult>)
}

class Player{
    + name : String
	  + score : Score
	  - augmenters : List<ScoreAugmenter>
    + sumScore(score :Score)
    + defeatsPlayer(opponent :Player) :boolean
    + hasAugmenter(augmenter :ScoreAugmenter) :boolean
    + getAugmenter(augmenter :ScoreAugmenter) :ScoreAugmenter
    - loadAugmenters()
}

abstract ScoreAugmenter{
    + {abstract}applyScoreAugmenter(Score score, Score opponentScore)
    + {abstract} getUsesPerPlayer :int
    + {abstract} isForPenalty :boolean
    # {abstract}getType() : AugmenterType
}


Game  o--"1..*"  Question
Game o--"1..*"  Player

Score "1..1"*--left ScoreAugmenter
ScoreCalculator --> Player

Player --left> Question

Player "1..1"*-- Score

Question "1..*"*--left GameOption
OptionGroup --up|> GameOption

@enduml